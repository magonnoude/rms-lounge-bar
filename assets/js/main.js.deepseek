// =========================
//  RMS Lounge Bar - main.js
//  Version "propre" (drop-in)
// =========================

// ---- CONFIG AWS (mêmes valeurs que ton projet actuel) ----
const API_URL = 'https://xfpzt4zm66.execute-api.eu-west-3.amazonaws.com/prod/form';
const API_KEY = 'tLk8XDgCts3ElJrYMAbRX62p3iWYlWt1a54iZIRr'; // pense à la rotation côté API Gateway plus tard

// ---- UTILITAIRES UI ----
function setLoadingState(buttonId, isLoading, label = null) {
  const btn = document.getElementById(buttonId);
  if (!btn) return;
  if (isLoading) {
    btn.classList.add('loading');
    btn.innerHTML = '<span class="loading-spinner"></span> Envoi en cours...';
    btn.disabled = true;
  } else {
    btn.classList.remove('loading');
    btn.innerHTML = label || (buttonId === 'reservationSubmit' ? 'Réserver' : 'Envoyer');
    btn.disabled = false;
  }
}

function showNotification(message, isSuccess = true) {
  let el = document.getElementById('notification');
  if (!el) {
    el = document.createElement('div');
    el.id = 'notification';
    document.body.appendChild(el);
  }
  el.textContent = message;
  el.className = 'notification' + (isSuccess ? '' : ' error') + ' show';
  setTimeout(() => el.classList.remove('show'), 5000);
}

function €xof(v) {
  return new Intl.NumberFormat('fr-BJ', { style: 'currency', currency: 'XOF', maximumFractionDigits: 0 }).format(v || 0);
}

// ---- INCLUDES HEADER/FOOTER (si présents) ----
async function includePartials() {
  // Header
  const headerTargets = ['header', 'header-container'];
  for (const id of headerTargets) {
    const el = document.getElementById(id);
    if (el) {
      try {
        const r = await fetch('header.html', { cache: 'no-cache' });
        if (r.ok) el.innerHTML = await r.text();
      } catch {}
    }
  }
  // Footer
  const footer = document.getElementById('footer');
  if (footer) {
    try {
      const r = await fetch('footer.html', { cache: 'no-cache' });
      if (r.ok) footer.innerHTML = await r.text();
    } catch {}
  }
}

// ---- MENU MOBILE ----
function setupMobileMenu() {
  const mobileMenuBtn = document.querySelector('.mobile-menu-btn') || document.getElementById('mobileMenuBtn');
  const mobileMenuClose = document.getElementById('mobileMenuClose');
  const nav = document.querySelector('nav') || document.getElementById('mainNav');

  if (mobileMenuBtn && nav) {
    mobileMenuBtn.addEventListener('click', () => {
      nav.classList.add('active');
      document.body.style.overflow = 'hidden';
    });
  }
  if (mobileMenuClose && nav) {
    mobileMenuClose.addEventListener('click', () => {
      nav.classList.remove('active');
      document.body.style.overflow = 'auto';
    });
  }
  // Fermer le menu au clic sur un lien
  document.querySelectorAll('nav a').forEach(a => {
    a.addEventListener('click', () => {
      if (nav) {
        nav.classList.remove('active');
        document.body.style.overflow = 'auto';
      }
    });
  });
}

// ---- TABS DU MENU ----
function setupMenuTabs() {
  const tabBtns = document.querySelectorAll('.tab-btn');
  const menuItems = document.querySelectorAll('.menu-item');
  if (!tabBtns.length || !menuItems.length) return;

  tabBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      tabBtns.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      const category = btn.getAttribute('data-category');
      menuItems.forEach(item => {
        const ok = category === 'all' || item.getAttribute('data-category') === category;
        item.style.display = ok ? 'block' : 'none';
      });
    });
  });

  // Option: animation/affichage par défaut
  setTimeout(() => {
    menuItems.forEach(it => {
      if (it.getAttribute('data-category') === 'entrees') it.classList.add('show');
    });
  }, 300);
}

// ---- VALIDATIONS ----
function validateReservationForm(data) {
  const errors = [];
  if (!data.name || data.name.trim().length < 2) errors.push('Le nom doit contenir au moins 2 caractères');
  if (!data.email || !/\S+@\S+\.\S+/.test(data.email)) errors.push('Veuillez entrer un email valide');
  if (!data.phone || data.phone.trim().length < 8) errors.push('Veuillez entrer un numéro de téléphone valide');
  if (!data.guests || data.guests < 1 || data.guests > 20) errors.push('Le nombre de personnes doit être entre 1 et 20');
  if (data.date && data.time) {
    const when = new Date(`${data.date}T${data.time}`);
    const min = new Date(Date.now() + 2 * 60 * 60 * 1000);
    if (when < min) errors.push('La réservation doit être faite au moins 2 heures à l’avance');
  }
  return errors;
}

function validateContactForm(data) {
  const errors = [];
  if (!data.name || data.name.trim().length < 2) errors.push('Le nom doit contenir au moins 2 caractères');
  if (!data.email || !/\S+@\S+\.\S+/.test(data.email)) errors.push('Veuillez entrer un email valide');
  if (!data.message || data.message.trim().length < 5) errors.push('Veuillez entrer un message (5 caractères minimum)');
  return errors;
}

// ---- ENVOI VERS API GATEWAY ----
async function postJSON(payload) {
  const r = await fetch(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': API_KEY
    },
    body: JSON.stringify(payload)
  });
  let json = {};
  try { json = await r.json(); } catch {}
  if (!r.ok) {
    throw new Error(json.error || `Erreur HTTP ${r.status}`);
  }
  return json;
}

// ---- HANDLERS FORMULAIRES ----
async function handleReservationSubmit(e) {
  e.preventDefault();
  setLoadingState('reservationSubmit', true);

  const form = e.currentTarget;
  const data = Object.fromEntries(new FormData(form).entries());
  const payload = {
    type: 'reservation', // important pour le template email côté Lambda
    name: data.name || '',
    email: data.email || '',
    phone: data.phone || '',
    guests: Number(data.guests || 1),
    date: data.date || '',
    time: data.time || '',
    message: data.message || ''
  };

  const errors = validateReservationForm(payload);
  if (errors.length) {
    showNotification(errors[0], false);
    setLoadingState('reservationSubmit', false);
    return;
  }

  try {
    const res = await postJSON(payload);
    alert(`Réservation envoyée ! ID: ${res.submissionId || '—'}`);
    form.reset();
  } catch (err) {
    console.error(err);
    showNotification('Une erreur s’est produite. Réessayez.', false);
  } finally {
    setLoadingState('reservationSubmit', false);
  }
}

async function handleContactSubmit(e) {
  e.preventDefault();
  setLoadingState('contactSubmit', true);

  const form = e.currentTarget;
  const data = Object.fromEntries(new FormData(form).entries());
  const payload = {
    type: 'contact', // important pour le template email côté Lambda
    name: data.name || '',
    email: data.email || '',
    phone: data.phone || '',
    message: data.message || ''
  };

  const errors = validateContactForm(payload);
  if (errors.length) {
    showNotification(errors[0], false);
    setLoadingState('contactSubmit', false);
    return;
  }

  try {
    const res = await postJSON(payload);
    alert(`Message envoyé ! ID: ${res.submissionId || '—'}`);
    form.reset(); // ✅ corrige l’ancien bug qui reset le mauvais formulaire
  } catch (err) {
    console.error(err);
    showNotification('Une erreur s’est produite. Réessayez.', false);
  } finally {
    setLoadingState('contactSubmit', false);
  }
}

// ---- INIT ----
document.addEventListener('DOMContentLoaded', async () => {
  await includePartials();
  setupMobileMenu();
  setupMenuTabs();

  // Accroche les deux variantes d’IDs (compatibilité des pages)
  const reservationForm =
    document.getElementById('reservationForm') ||
    document.getElementById('booking-form');

  const contactForm =
    document.getElementById('contactForm') ||
    document.getElementById('contact-form');

  if (reservationForm) {
    reservationForm.addEventListener('submit', handleReservationSubmit);
  }
  if (contactForm) {
    contactForm.addEventListener('submit', handleContactSubmit);
  }
});
